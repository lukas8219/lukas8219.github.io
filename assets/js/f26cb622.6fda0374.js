"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7402],{3905:(e,n,r)=>{r.d(n,{Zo:()=>u,kt:()=>g});var t=r(67294);function i(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){i(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function a(e,n){if(null==e)return{};var r,t,i=function(e,n){if(null==e)return{};var r,t,i={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(i[r]=e[r]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var l=t.createContext({}),c=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=c(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),p=c(r),f=i,g=p["".concat(l,".").concat(f)]||p[f]||d[f]||o;return r?t.createElement(g,s(s({ref:n},u),{},{components:r})):t.createElement(g,s({ref:n},u))}));function g(e,n){var r=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=f;var a={};for(var l in n)hasOwnProperty.call(n,l)&&(a[l]=n[l]);a.originalType=e,a[p]="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},22296:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var t=r(87462),i=(r(67294),r(3905));const o={title:"Pods DNS - Configs and Policies",tags:["kubernetes","k8s"]},s=void 0,a={unversionedId:"learn-in-public/Engineering/Infrastructure/Kubernetes/Pod DNS - Config and Policies",id:"learn-in-public/Engineering/Infrastructure/Kubernetes/Pod DNS - Config and Policies",title:"Pods DNS - Configs and Policies",description:'In Kubernetes Networking everything is virtualized - where inter-pod communication is done via CNI - or better rephrased, this responsibility is from a CNI. In many cases, when Pods are hosted on the same network - the "network" calls never leave the kernel-level and are routed by Linux Namespaces.',source:"@site/docs/learn-in-public/1. Engineering/Infrastructure/Kubernetes/Pod DNS - Config and Policies.md",sourceDirName:"learn-in-public/1. Engineering/Infrastructure/Kubernetes",slug:"/learn-in-public/Engineering/Infrastructure/Kubernetes/Pod DNS - Config and Policies",permalink:"/docs/learn-in-public/Engineering/Infrastructure/Kubernetes/Pod DNS - Config and Policies",draft:!1,tags:[{label:"kubernetes",permalink:"/docs/tags/kubernetes"},{label:"k8s",permalink:"/docs/tags/k-8-s"}],version:"current",frontMatter:{title:"Pods DNS - Configs and Policies",tags:["kubernetes","k8s"]},sidebar:"learn-in-public",previous:{title:"Networking Challenges",permalink:"/docs/learn-in-public/Engineering/Infrastructure/Kubernetes/Networking Challenges"},next:{title:"Networking Challenges",permalink:"/docs/learn-in-public/Engineering/Infrastructure/Networking Challenges"}},l={},c=[{value:"DNSPolicy: None",id:"dnspolicy-none",level:3},{value:"DNSPolicy: Default",id:"dnspolicy-default",level:3},{value:"DNSPolicy: ClusterFirst",id:"dnspolicy-clusterfirst",level:3}],u={toc:c},p="wrapper";function d(e){let{components:n,...r}=e;return(0,i.kt)(p,(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'In Kubernetes Networking everything is virtualized - where inter-pod communication is done via CNI - or better rephrased, this responsibility is from a CNI. In many cases, when Pods are hosted on the same network - the "network" calls never leave the kernel-level and are routed by Linux Namespaces.\nKubernetes exposes a lot of different possibilities of DNS configuration for Pods - up to using the Cluster configuration, no DNS config, specifying the ',(0,i.kt)("inlineCode",{parentName:"p"},"nameservers"),", options and much more.\nIn this post - we are going to compare the impacts of DNS Policies and Configs on Pod deployments."),(0,i.kt)("h3",{id:"dnspolicy-none"},"DNSPolicy: None"),(0,i.kt)("p",null,"With this config - the Pods ",(0,i.kt)("inlineCode",{parentName:"p"},"/etc/resolv.conf")," will have at least 1 ",(0,i.kt)("inlineCode",{parentName:"p"},"nameserver")," configured in ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.dnsConfig.nameservers")),(0,i.kt)("h3",{id:"dnspolicy-default"},"DNSPolicy: Default"),(0,i.kt)("h3",{id:"dnspolicy-clusterfirst"},"DNSPolicy: ClusterFirst"))}d.isMDXComponent=!0}}]);