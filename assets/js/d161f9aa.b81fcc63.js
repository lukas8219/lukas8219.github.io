"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2067],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>h});var n=a(67294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),p=c(a),m=i,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return a?n.createElement(h,s(s({ref:t},u),{},{components:a})):n.createElement(h,s({ref:t},u))}));function h(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=a.length,s=new Array(o);s[0]=m;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[p]="string"==typeof e?e:i,s[1]=r;for(var c=2;c<o;c++)s[c]=a[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9918:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var n=a(87462),i=(a(67294),a(3905));const o={title:"DataStructure Applicabilities - Bitmap and Access Control: How to scale notifications with ACL",tags:["websocket","notifications","datastructures","bitmaps","readisismorethanacache","redis"],authors:"lukas8219"},s=void 0,r={permalink:"/blog/2025/04/06/data-strucutres-applicability",source:"@site/blog/2025-04-06/data-strucutres-applicability.md",title:"DataStructure Applicabilities - Bitmap and Access Control: How to scale notifications with ACL",description:"As engineers we are very used to manipulating data in well-know structures like arrays, queues, sets and maps as they solve day-to-day issues - like when you need to manipulate relationships from database on the client-side, you use Sets/Maps to prevent O(n\u02c62)searches.",date:"2025-04-06T00:00:00.000Z",formattedDate:"April 6, 2025",tags:[{label:"websocket",permalink:"/blog/tags/websocket"},{label:"notifications",permalink:"/blog/tags/notifications"},{label:"datastructures",permalink:"/blog/tags/datastructures"},{label:"bitmaps",permalink:"/blog/tags/bitmaps"},{label:"readisismorethanacache",permalink:"/blog/tags/readisismorethanacache"},{label:"redis",permalink:"/blog/tags/redis"}],readingTime:4.19,hasTruncateMarker:!1,authors:[{name:"Lucas Weis Polesello",title:"SRE | Senior Software Engineer @ LumaHealth",url:"https://github.com/lukas8219",email:"lucas.polesello@lwpsoftwares.com | lucas.c4d@gmail.com",socials:{x:"https://x.com/luucaspole"},imageURL:"https://github.com/lukas8219.png",key:"lukas8219"}],frontMatter:{title:"DataStructure Applicabilities - Bitmap and Access Control: How to scale notifications with ACL",tags:["websocket","notifications","datastructures","bitmaps","readisismorethanacache","redis"],authors:"lukas8219"},nextItem:{title:"The Tale of How We Compensated Years of Tech Debt in a Month: Performance, Cost and Optimizations",permalink:"/blog/2025/03/31/network-bandwidth-reduction"}},l={authorsImageUrls:[void 0]},c=[{value:"The Problem with Access Control",id:"the-problem-with-access-control",level:2},{value:"The Challenge Is About Scale",id:"the-challenge-is-about-scale",level:3},{value:"But We Like To Pretend Windmills are Dragons",id:"but-we-like-to-pretend-windmills-are-dragons",level:3},{value:"The Scenario:",id:"the-scenario",level:3},{value:"BitMaps and Access Control",id:"bitmaps-and-access-control",level:3},{value:"The Design",id:"the-design",level:2},{value:"The Outcome",id:"the-outcome",level:3},{value:"Take Aways Points Notes",id:"take-aways-points-notes",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...a}=e;return(0,i.kt)(p,(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"As engineers we are very used to manipulating data in well-know structures like arrays, queues, sets and maps as they solve day-to-day issues - like when you need to manipulate relationships from database on the client-side, you use Sets/Maps to prevent ",(0,i.kt)("inlineCode",{parentName:"p"},"O(n\u02c62)"),"searches."),(0,i.kt)("p",null,"But one of the not-so common data structures is the Bitmap - being very math-focused and tailored for certain scenarios - it's usually forgotten."),(0,i.kt)("p",null,"Today we are going to showcase one scenario where it might be interesting to use it."),(0,i.kt)("h2",{id:"the-problem-with-access-control"},"The Problem with Access Control"),(0,i.kt)("p",null,"In many SaaS platforms - the ACL model usually revolves around ",(0,i.kt)("strong",{parentName:"p"},"many-to-many")," relationships, as example - imagine you have a software that solves for real-time communication such as Slack but give it a bit more of ",(0,i.kt)("strong",{parentName:"p"},"spiciness")," (",(0,i.kt)("em",{parentName:"p"},"as if Slack needs it?"),") - give it 1 more layer of control."),(0,i.kt)("p",null,"You would have an User U that belongs to Groups G. And each Group has it's own set of Teams T. Each sent message for a Team T should be Broadcasted to all online Users that have access to Team T."),(0,i.kt)("p",null,"With this - you do have a problem where you need to ensure that messages CANNOT be routed to wrong recipients and other Teams may join the same conversation."),(0,i.kt)("h3",{id:"the-challenge-is-about-scale"},"The Challenge Is About Scale"),(0,i.kt)("p",null,"You can scale this by simply doing database queries - up to a certain scale this is fairly simple. A query would hardly reach >50ms if well-indexed. Even if it was poorly optimized wouldn't be a huge problem.\nNonetheless, maybe even the amount of  notifications is not a problem!"),(0,i.kt)("h3",{id:"but-we-like-to-pretend-windmills-are-dragons"},"But We Like To Pretend Windmills are Dragons"),(0,i.kt)("p",null,"The real challenge is:\n",(0,i.kt)("inlineCode",{parentName:"p"},"What if, either lucky or the biggest salesman ever, your company reaches a huge milestone and now scale hits upon the backdoor")),(0,i.kt)("h3",{id:"the-scenario"},"The Scenario:"),(0,i.kt)("p",null,"Out of a sudden now you are handling 30K+ notifications per second. Your engineering team, knowing the domain of the product, designed almost all modeling and infrastructure with this in mind. But yet hammering the database 30K+ times per second is far from ideal - although injecting",(0,i.kt)("inlineCode",{parentName:"p"},"$$$")," solves it - we like to pretend people care for green solutions in this blog."),(0,i.kt)("p",null,"At a certain day - a Slack thread arrives:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Engineer 1: Since the last Go-live our database system is just crawling man... I don't know how long we can sustain this.\nEngineer 2: Yeah... We jumped from 10K Messages/Sec to more than 30K - no wonder it just got hammered\nEngineer 1: I think it's time to optimize this but that might be hard - maybe some caching layer?\nEngineer 2: Yeah, caching could be the way - but how?\nEngineer 1: I have no idea to be honest. it might be too much data for Redis?\nEngineer 3: Yo I am pretty sure some has solved this...\nCTO: I think we can use Bitmaps for that ?\n")),(0,i.kt)("h3",{id:"bitmaps-and-access-control"},"BitMaps and Access Control"),(0,i.kt)("p",null,"Finally we reached the main part of this article - ",(0,i.kt)("strong",{parentName:"p"},"Bitmaps")," - are data structures specialized in binary operations - being fast and space-efficient.\nBy such they efficiently tell us wether something is ON/OFF or TRUE/FALSE."),(0,i.kt)("h2",{id:"the-design"},"The Design"),(0,i.kt)("p",null,"Each Tenant would have all of its Teams lay'ed out in Redis Bitmaps such as:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"teams:<tenantId>:<tid>\nonline-users:<tenantId>\n")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"(Assuming you have de-normalized this relations due to it's read-pattern)"),"\nInstead of doing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT\n    ug.user\nFROM\n    groups ug\nWHERE\n    ug.teams IN (<list of teams>)\n    AND ug.tenantId = <tenantId>\n")),(0,i.kt)("p",null,"You would simply use a small LuaScript:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local tenantId = ARGV[1]\nlocal tmp_or_key = 'tmp:teams'\nlocal notify_key = 'tmp:notification'\nlocal online_key = 'online-users:' + tenantId\n\n-- Store tmp key for all SET bitmaps using OR operator\nredis.call('BITOP', 'OR', tmp_or_key, unpack(KEYS))\n\n-- Store the key with the \nredis.call('BITOP', 'AND', notify_key, tmp_or_key, online_key)\n\n-- Extract those Ids\nlocal max_index = redis.call('STRLEN', notify_key) * 8\nlocal notified_users = {}\nfor i = 0, max_index - 1 do\n  local bit = redis.call('GETBIT', notify_key, i)\n  if bit == 1 then\n    table.insert(notified_users, i)\n  end\nend\n\n-- Optional\nredis.call('DEL', tmp_or_key)\n\nreturn notified_users\n")),(0,i.kt)("h3",{id:"the-outcome"},"The Outcome"),(0,i.kt)("p",null,"So revisiting what changed in the infrastructure:"),(0,i.kt)("p",null,"Before, you were doing 30K database operations - which include all the way from Parsing, Planning, Optimizing, Checking Buffer Cache - maybe reading from Disk. It's even worse, if your database is write-specialized like those with LSM Storage Engines."),(0,i.kt)("p",null,"Instead of doing all of this: You are now flipping bits in a pretty-much efficient CPU cache."),(0,i.kt)("p",null,"The current scenario?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Your database is free of abusive reads."),(0,i.kt)("li",{parentName:"ul"},"It can focus on the write-heavy nature of Chat systems"),(0,i.kt)("li",{parentName:"ul"},"Notifications are now even faster - what took (luckily) under 50ms is now under 1ms"),(0,i.kt)("li",{parentName:"ul"},"Downgrade that database man and save some money!")),(0,i.kt)("h3",{id:"take-aways-points-notes"},"Take Aways Points Notes"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"You might be asking yourself if you couldn't do so with normal ",(0,i.kt)("inlineCode",{parentName:"li"},"Sets"),". And the answer is: ",(0,i.kt)("inlineCode",{parentName:"li"},"Yes"),".\nThe trade-offs? ",(0,i.kt)("inlineCode",{parentName:"li"},"RAM Storage($$$), CPU Performance and Latency overall")," "),(0,i.kt)("li",{parentName:"ol"},"You could easily fit more than 10 Million Users within less than 5GB of data using ",(0,i.kt)("a",{parentName:"li",href:"https://roaringbitmap.org/"},"Roaring Bitmaps"),"!")))}d.isMDXComponent=!0}}]);